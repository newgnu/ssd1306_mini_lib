/* 
 * the SSD1306 draws each column bottom up for one byte, then moves from left to right
 * for example: B00001111 (0x0F) would draw the top half of the row, 1px wide
 * 
 * There are a number of ways this can be used. for example: a simple 8px tall monospace 
 * font could be drawn 4 or 5 bytes wide, or a proportional font could be allocated the 
 * same way to make offsets easier, but trigger on some marker to indicate end-of-character
 * similar to how C uses a 0x00 to indicate end of a character string (though I would use
 * something like 0xFF since 0x00 would be expected for space or !).
 * The 8x16 font below makes use of setting the begin/end row/column addresses to be 
 * 8 columns wide by 2 rows tall on the SSD1306, then letting it handle the wrapping for me,
 * though this means I have to print each character individually.
 * 
 * I use a piece of graph paper to lay out what I want, then turn it sideways and convert it
 * to HEX. You could also write these in BIN format and get a semi-graphical idea of what will
 * be displayed, just 90-degrees clockwise (like icon_alarm_clock below). There are also 
 * plenty of programs that'll help do this too if you google around a bit.
 */
 
#include <avr/pgmspace.h>  //needed for PROGMEM variables

static const uint8_t icon_alarm_clock[] PROGMEM = {
  //0xBB, 0x45, 0x82, 0x9A, 0x92, 0x45, 0xBB
  B10111011,
  B01000101,
  B10000010,
  B10011010,
  B10010010,
  B01000101,
  B10111011
};

static const uint8_t numfont_8x16[] PROGMEM = {
  0xFC, 0xFE, 0x07, 0x03, 0x03, 0x07, 0xFE, 0xFC, //0 -- top
  0x3F, 0x7F, 0xE0, 0xC0, 0xC0, 0xE0, 0x7F, 0x3F, //0 -- bottom
  0x00, 0x04, 0x06, 0xFF, 0xFF, 0x00, 0x00, 0x00, //1
  0x00, 0xC0, 0xC0, 0xFF, 0xFF, 0xC0, 0xC0, 0x00,
  0x0C, 0x0E, 0x07, 0x03, 0x03, 0x87, 0xFE, 0xFC, //2
  0xF0, 0xF8, 0xDC, 0xCE, 0xC7, 0xC3, 0xC1, 0xC0,
  0x0C, 0x0E, 0x07, 0x03, 0x83, 0xC7, 0x7E, 0x3C, //3
  0x30, 0x70, 0xE0, 0xC0, 0xC1, 0xE3, 0x7E, 0x3C, 
  0x00, 0x00, 0xC0, 0xF0, 0x3C, 0xFF, 0xFF, 0x00, //4
  0x0C, 0x0F, 0x0F, 0x0C, 0x0C, 0xFF, 0xFF, 0x0C, 
  0xFF, 0xFF, 0xC3, 0xC3, 0xC3, 0xC3, 0x83, 0x03, //5
  0x30, 0x70, 0xE0, 0xC0, 0xC0, 0xE1, 0x7F, 0x3F, 
  0xFC, 0xFE, 0x87, 0x83, 0x83, 0x87, 0x0E, 0x0C, //6
  0x3F, 0x7F, 0xE3, 0xC1, 0xC1, 0xE3, 0x7F, 0x3E, 
  0x07, 0x07, 0x03, 0x03, 0xC3, 0xF3, 0x3F, 0x0F, //7
  0x00, 0x00, 0xFC, 0xFF, 0x03, 0x00, 0x00, 0x00,
  0x3C, 0x7E, 0xC7, 0x83, 0x83, 0xC7, 0x7E, 0x3C, //8
  0x3C, 0x7E, 0xE3, 0xC1, 0xC1, 0xE3, 0x7E, 0x3C,
  0x7C, 0xFE, 0xC7, 0x83, 0x83, 0xC7, 0xFE, 0xFC, //9
  0x30, 0x70, 0xE1, 0xC1, 0xC1, 0xE1, 0x7F, 0x3F
};

static const uint8_t numfont_4x8[] PROGMEM = {
  0x7E, 0x81, 0x81, 0x7E, //0
  0x00, 0x82, 0xFF, 0x80, //1
  0xC2, 0xA1, 0x91, 0x8E, //2
  0x42, 0x81, 0x99, 0x66, //3
  0x1F, 0x10, 0x10, 0xFF, //4
  0x4F, 0x85, 0x85, 0x79, //5
  0x7E, 0x89, 0x89, 0x72, //6
  0x01, 0xE1, 0x19, 0x07, //7
  0x76, 0x89, 0x89, 0x76, //8
  0x4E, 0x91, 0x91, 0x7E  //9
};

static const uint8_t charfont_5x8[] PROGMEM = { //caps-only
  0xF0, 0x2C, 0x23, 0x2C, 0xF0, //A
  0xFF, 0x89, 0x89, 0x89, 0x76, //B
  0x7E, 0x81, 0x81, 0x81, 0x42, //C
  0xFF, 0x81, 0x81, 0x81, 0x7E, //D
  0xFF, 0x89, 0x89, 0x81, 0x81, //E
  0xFF, 0x09, 0x09, 0x01, 0x01, //F
  0x7E, 0x81, 0x81, 0x91, 0x72, //G
  0xFF, 0x08, 0x08, 0x08, 0xFF, //H
  0x81, 0x81, 0xFF, 0x81, 0x81, //I
  0x60, 0x60, 0x80, 0x80, 0x7F, //J
  0xFF, 0x08, 0x14, 0x22, 0xC1, //K
  0xFF, 0x80, 0x80, 0x80, 0x80, //L
  0xFF, 0x02, 0x04, 0x02, 0xFF, //M
  0xFF, 0x02, 0x04, 0x08, 0xFF, //N
  0x7E, 0x81, 0x81, 0x81, 0x7E, //O
  0xFF, 0x09, 0x09, 0x09, 0x06, //P
  0x7E, 0x81, 0xA1, 0xC1, 0x7E, //Q
  0xFF, 0x09, 0x19, 0x29, 0xC6, //R
  0x46, 0x89, 0x89, 0x89, 0x72, //S
  0x01, 0x01, 0xFF, 0x01, 0x01, //T
  0x7F, 0x80, 0x80, 0x80, 0x7F, //U
  0x0F, 0x30, 0xC0, 0x30, 0x0F, //V
  0xFF, 0x40, 0x20, 0x40, 0xFF, //W
  0xC3, 0x34, 0x08, 0x34, 0xC3, //X
  0x03, 0x04, 0xF0, 0x04, 0x03, //Y
  0xC1, 0xA1, 0x99, 0x85, 0x83, //Z
};

